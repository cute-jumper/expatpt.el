* expatpt

expatpt: arithmetic EXPression AT PoinT

Grab the arithmetic expression around the cursor.

This package makes use of [[https://github.com/cute-jumper/parsec.el][parsec.el]].

* Command: =expatpt=
  This command grabs a *valid* arithmetic expression around the cursor,
  evaluates the expression, puts the result in the =kill-ring= and shows it in
  the echo area.

  Example ( ~|~ indicates the cursor position):
  #+BEGIN_EXAMPLE
  -+2|-4
  #+END_EXAMPLE

  After invoking =expatpt=, the echo area will show =+2-4 => -2=, and the result
  =-2= will be put into the =kill-ring= so you can paste it whenever you want.

  If =expatpt= is called with a prefix argument, it will also replace the
  grabbed expression with its evaluation result in the buffer. The expression
  itself will be put into the =kill-ring= so that it now becomes the first item
  in the =kill-ring=, followed by the evaluation result.

* Function: =expatpt-grab=
  This function is not intended for interactive usage. It is used to grab the
  *valid* arithmetic expression around the cursor. The return value is a list
  containing three values. The first one is the string of the expression, and
  the second and the third one are beginning and ending postions of the
  expression in the current buffer. This *thing-at-point* function can be used
  as a utility function to define your own commands/functions.

* The Supported Arithmetic Expression Syntax
  For the time being, it is very simple. A number can be =+2=, =2.6=, or
  =-2.0e2=, and only addition(+), subtraction(-), multiplication(*), division(/)
  and power(^) are supported.

* TODO TODO
  I would like to make the arithmetic expression syntax mode-aware. For example,
  it would be great if we add a parser for arithmetic expression in \LaTeX{}.

* Dependencies
  - [[https://github.com/cute-jumper/parsec.el][parsec.el]]: parser combinator library for Emacs Lisp.
  - calc: built-in library for arithmetic calculation

  Side note: since we have the parser for the arithmetic expression, we actually
  don't need =calc=. But for convenience's sake, we use =calc= to evaluate the
  arithmetic expression.
